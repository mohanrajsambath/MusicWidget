package com.androidtask.musicwidget.service;


import android.app.Service;
import android.appwidget.AppWidgetManager;
import android.content.ComponentName;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;
import android.view.View;
import android.widget.RemoteViews;
import android.widget.Toast;

import com.androidtask.musicwidget.MusicWidget;
import com.androidtask.musicwidget.R;
import com.androidtask.musicwidget.backend.MusicLoader;
import com.androidtask.musicwidget.backend.MusicNotification;
import com.androidtask.musicwidget.model.Song;
import com.androidtask.musicwidget.musicplayer.MusicPlayer;
import com.androidtask.musicwidget.musicplayer.MusicPlayerCompletionListener;

import java.io.IOException;


public class MusicService extends Service implements MusicPlayerCompletionListener 
{
	private static final String TAG = "Music Service";
	private static final int ONGOING_NOTIFICATION_ID = 1;
	private MusicPlayer player;
	private MusicNotification mNotification;
	
	@Override
	public void onCreate() {
		/* let's wait until the debugger attaches */
        //android.os.Debug.waitForDebugger();
		
		Log.d(TAG, "onCreate()");
        
		player = new MusicPlayer(this);
		player.setOnCompletionListener(this);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		String action = intent.getAction() != null ? intent.getAction() : "";
		
		try {
			if (action.equals(MusicWidget.ACTION_PLAY_PAUSE))
			{
				if (player.isPlaying())
					pauseMusic();
				else{
					playMusic();
				}
			}
			else if (action.equals(MusicWidget.ACTION_STOP))
			{
				stopMusic();
			}
			else if (action.equals(MusicWidget.ACTION_JUMP_TO))
			{
				Song song = (Song)intent.getExtras().get("song");
				jumpTo(song);
			}

		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return super.onStartCommand(intent, START_STICKY, 1);
	}



	@Override
	public void onDestroy() 
	{
		Log.d(TAG, "DESTROY SERVICE");
		if (player != null && !player.isStopped())
			stopMusic();
		
		super.onDestroy();		
	}
	
	private void updateUI(String title, String artist, String duration, Boolean isPlaying){
		// Update widget
		
		// We need to use the RemoteViews generated by the MusicWidget, class to make sure we preserve the pending intents for the buttons.
		// Otherwise the widget's buttons can stop responding to touch events.
		RemoteViews remoteViews = MusicWidget.getRemoteViews(this);
		
		if (title != null && artist != null && duration != null){
			remoteViews.setViewVisibility(R.id.layoutTextViews, View.VISIBLE);
			remoteViews.setTextViewText(R.id.textViewTitle, title);
			remoteViews.setTextViewText(R.id.textViewArtist, artist);
			remoteViews.setTextViewText(R.id.textViewDuration, duration);	
		} else {
			remoteViews.setViewVisibility(R.id.layoutTextViews, View.GONE);
		}
		
		
		if (isPlaying != null){
			if (isPlaying)
				remoteViews.setImageViewResource(R.id.button_play_pause, R.drawable.ic_pause_white_36dp);
			else
				remoteViews.setImageViewResource(R.id.button_play_pause, R.drawable.ic_play_arrow_white_36dp);
		}



		ComponentName thisWidget = new ComponentName(this, MusicWidget.class);
		AppWidgetManager manager = AppWidgetManager.getInstance(this);
		manager.updateAppWidget(thisWidget, remoteViews);
		
		// Create/Update a notification, to run the service in foreground
		if (artist != null && title != null) {
			if (mNotification == null) {
				mNotification = new MusicNotification(this, ONGOING_NOTIFICATION_ID, title, artist);
				startForeground(ONGOING_NOTIFICATION_ID, mNotification.getNotification());
			} else {
				boolean isPlayingUnboxed = isPlaying != null ? isPlaying : false;
				mNotification.update(title, artist, isPlayingUnboxed);
			}
		} else {
			stopForeground(true);
		}
	}

	
	private void playMusic() throws IOException
	{
		Log.d(TAG, "PLAY");
		Song song = MusicLoader.getInstance(this).getCurrent();

		if (player.isPaused()) {
			player.play();
		}else{
			player.setSong(song);
			player.play();
		}
	
		updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), true);
		Log.i("Music Service", "Playing: " + song.getTitle());
	}
	
	
	private void pauseMusic()
	{
		Log.d(TAG, "PAUSE");
		if (player.isPlaying()){
			Song song = MusicLoader.getInstance(this).getCurrent();
			updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), false);
			
			player.pause();
			Log.d(TAG, "Music paused");
		}
	}
	

	private void stopMusic()
	{	
		Log.d(TAG, "STOP MUSIC");
		
		player.stop();
		updateUI(null, null, null, false);
		MusicLoader.getInstance(this).close();
		
		stopSelf();
	}
	
	private void nextSong() throws IOException
	{
		Log.d(TAG, "NEXT SONG");

		if (player != null) {
			Song nextSong = MusicLoader.getInstance(this).getNext();
			player.setSong(nextSong);

			updateUI(nextSong.getTitle(), nextSong.getArtist(), nextSong.getDurationStr(), player.isPlaying());
		}
	}


	private void jumpTo(Song song) throws IOException
	{
		MusicLoader.getInstance(this).jumpTo(song);
		playMusic();
	}
	
	@Override
	public void onMusicCompletion() throws IOException {
		nextSong();
		player.play();
		Song song = MusicLoader.getInstance(this).getCurrent();
		updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), true);
	}
	
	@Override
	public IBinder onBind(Intent intent) 
	{	
		return null;
	}
}
